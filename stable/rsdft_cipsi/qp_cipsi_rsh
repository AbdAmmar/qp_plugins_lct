#!/bin/bash 
# specify the QP folder 
QP=$QP_ROOT
# sourcing the quantum_package.rc file
. ${QP}/quantum_package.rc


TEMP=$(getopt -o m:f:p:n:t:h -l mu:,func:pt2_max:ndet_max:thresh,help -n $0 -- "$@") || exit 1

function help() {
  cat << EOF
 
 
 ********            ********* 
 This script runs a RSH-CIPSI calculation starting from a ezfio folder 
 Here are the ASSUMTIONS 
 ******** ASSUMPTIONS ********* 
 1) The mo_class should be specified in the EZFIO folder 
 2) The wave function stored in the EZFIO folder, whatever it is, will be used as the starting point to run the RSH calculation 
    Usually a single Slater determinant RSH wave function with the same mu and functional is a good starting point (run the RS_KS_SCF program)  
 ********            ********* 
                               
 Here are the INPUTS ARGUMENT for the script 
 ******** INPUTS OF THE SCRIPT ********* 
 \$1 : ezfio = EZFIO folder on which you are going to run the script 
      no orbitals would be changed, it will only modify the wave function stored in the EZFIO folder 
 \$2 : functional = EXCHANGE / CORRELATION functionals to be used in RS-DFT calculation 
      can be LDA or PBE 
 \$3 : mu = SPLITTING of the INTERACTION to be used in RS-DFT calculation  
       0 <=> pure DFT calculation, Infinity <=> pure WFT calculation  
 \$4 : pt2max  : maximum value of the PT2 for the CIPSI calculation (note that it is with the effective hamiltonian so it can be self-consistent)  
       0 <=> FCI calculation, any bigger value is selected CI 
 \$5 : ndetmax  : maximum size of the CIPSI wave function  
                                                              
 \$6 : thresh : (OPTIONAL) value of the convergence of the energy for the self-consistent CIPSI calculation for a given set of Slater determinants   
       if not specified, a value of 0.0000001 is set by default (more than enough for regular calculations) 
********            *********
                             
                             
EOF
}

while true ; do
    case "$1" in
        -m|--mu) 
            case "$2" in
                "") help ; break;;
                *) mu="$2"
            esac 
            shift 2
	    ;;
        -f|--func) 
            case "$2" in
                "") help ; break;;
                *) functional="$2"
            esac 
            shift 2
	    ;;
        -n|--ndet_max) 
            case "$2" in
                "") help ; break;;
                *) ndetmax="$2"
            esac 
            shift 2
	    ;;
        -p|--pt2_max) 
            case "$2" in
                "") help ; break;;
                *) pt2max="$2"
            esac 
            shift 2
	    ;;
        -t|--thresh) 
            case "$2" in
                "") help ; break;;
                *) thresh="$2"
            esac 
            shift 2
	    ;;
        -h|-help|--help) 
            help
            exit 0;;
        --) shift ; break ;;
	"") help ; break ;;
    esac
done

ezfio=${1%/} # take off the / at the end

if [[ -z $ezfio ]]; then
   echo "You did not specify any input EZFIO folder ! "
   echo "stopping ..."
   echo "run $0 --help to have information on how to run the script !"
   echo "......"
   echo "......"
   exit
fi

echo "  **********"
echo "Here are the following INPUT parameters for the RSH-CIPSI run .."
echo "  **********"
echo "EZFIO folder :  "$ezfio 
if [[ -d $ezfio ]]; then
   echo "File $ezfio does exist !"
else
   echo "Input EZFIO folder does not exists !"
   echo "Folder $ezfio does not exist."
   echo "stopping ..."
   echo "......"
   echo "......"
   echo "......"
   exit
fi
# define the exchange / correlation functionals to be used in RS-DFT calculation
if [[ -n $functional ]]; then
 echo "you did not specify the \$functional parameter, it will be set to PBE by default (run --help for explanations)"
 functional="PBE"
fi
echo "FUNCTIONAL for RS-DFT:  "$functional
# splitting of the interaction to be used in RS-DFT calculation 
if [[ -n $mu ]]; then
 echo "you did not specify the \$mu parameter, it will be set to 0.5 by default (run --help for explanations)"
 mu=0.5
fi
echo "MU for RS-DFT:  "$mu
# maximum value of the PT2 for the CIPSI calculation (note that it is with the effective hamiltonian so it can be self-consistent)
if [[ -n $pt2max ]]; then
 echo "you did not specify the \$pt2max parameter, it will be set to 0.001 by default (run --help for explanations)"
 pt2max=0.001
fi
echo "PT2MAX for RS-DFT:  "$pt2max
# ndetmax  : maximum size of the CIPSI wave function 
if [[ -n $ndetmax ]]; then
 echo "you did not specify the \$ndetmax parameter, it will be set to 10000000 by default (run --help for explanations)"
 ndetmax=10000000
fi
echo "NDETMAX for RS-DFT:  "$ndetmax

# value of the convergence of the energy for the self-consistent CIPSI calculation at a given number of determinant
if [[ -n $thresh ]]; then
 echo "you did not specify the \$thresh parameter, it will be set to 0.0000000001 by default (run --help for explanations)"
 thresh="1.e-10"
fi
 echo "\$thresh of convergence is " $thresh


qp set_file $ezfio

qp  set  dft_keywords       exchange_functional     "short_range_${functional}"
qp  set  dft_keywords       correlation_functional  "short_range_${functional}"
qp  set  ao_two_e_erf_ints  mu_erf                  $mu
qp  set  perturbation       pt2_max                 $pt2max
qp  set  determinants       ndet_max                $ndetmax
# Use the wave function stored in the EZFIO to build effective RS-DFT potential
qp  set  density_for_dft    density_for_dft         "WFT"

# write the effective Hamiltonian containing long-range interaction and short-range effective potential to be diagonalized in a self-consistent way
qp run write_effective_rsdft_hamiltonian | tee ${ezfio}_rsdft-0
# save the RS-KS one-e density for the damping on the density 
qp run save_one_e_dm 

qp  set  density_for_dft    density_for_dft         "damping_rs_dft"
# damping_for_rs_dft : 0 == no update of the density, 1 == full update of the density 
qp  set  density_for_dft    damping_for_rs_dft      0.75
echo "0.75"            > ${ezfio}/dft_keywords/damping_for_rs_dft

for i in {1..3}
do
#  run the CIPSI calculation with the effective Hamiltonian already stored in the EZFIO folder 
   qp set determinants read_wf "False"
   qp run fci  | tee ${ezfio}/fci-$i
   # run 
   EV=0

   echo "#" iter evar old     evar new    deltae      threshold  >> ${ezfio}_data_conv_${i}
   for j in {1..100}
   do
      # write the new effective Hamiltonian with the damped density (and the current density to be damped with the next density)
      qp run write_effective_rsdft_hamiltonian | tee ${ezfio}/rsdft-${i}-${j}
      # value of the variational RS-DFT energy 
      EV_new=`grep "TOTAL ENERGY        =" ${ezfio}/rsdft-${i}-${j} | cut -d "=" -f 2`
      # rediagonalize the new effective Hamiltonian to obtain a new wave function and a new density 
      qp run diagonalize_h  | tee ${ezfio}/diag-${i}-${j}
      # checking the convergence
      DE=`echo "${EV_new} - ${EV}" | bc`
      DEabs=`echo "print abs(${DE})" | python `
      CONV=`echo "print ${DEabs} < ${thresh}" | python`
      echo $j $EV $EV_new $DE $thresh >> ${ezfio}_data_conv_${i}
      if [ "$CONV" = "True" ]; then
        break
      fi
      EV=$EV_new
    done

    qp run  write_effective_rsdft_hamiltonian | tee ${ezfio}_rsdft-${i}-final

#   qp set determinants read_wf "True"

#   qp run fci | tee ${ezfio}_FCI_final.out_$ndetmax
#   
#   qp run print_rsdft_variational_energy  | tee ${ezfio}_printdft_final.out_$ndetmax
    
done
